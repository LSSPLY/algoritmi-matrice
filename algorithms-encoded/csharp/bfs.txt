using System;
using System.Collections.Generic;

class Program {
    &#x2F;&#x2F; Funcția BFS care caută cel mai scurt drum într-un labirint
    static void BFS(int[,] grid, int rows, int cols, int iStart, int jStart, int iStop, int jStop) {
        &#x2F;&#x2F; Vectori de direcție: jos, dreapta, sus, stânga
        int[] di &#x3D; { 1, 0, -1, 0 };
        int[] dj &#x3D; { 0, 1, 0, -1 };

        &#x2F;&#x2F; Inițializăm coada pentru parcurgerea BFS
        Queue&lt;(int, int)&gt; queue &#x3D; new Queue&lt;(int, int)&gt;();

        &#x2F;&#x2F; Setăm poziția de start cu valoarea 1 (distanța inițială)
        grid[iStart, jStart] &#x3D; 1;
        queue.Enqueue((iStart, jStart));

        while (queue.Count &gt; 0) {
            var (i, j) &#x3D; queue.Dequeue();

            &#x2F;&#x2F; Verificăm toți cei 4 vecini
            for (int k &#x3D; 0; k &lt; 4; k++) {
                int ni &#x3D; i + di[k];
                int nj &#x3D; j + dj[k];

                &#x2F;&#x2F; Dacă vecinul este în interiorul grilei și este liber (0)
                if (ni &gt;&#x3D; 0 &amp;&amp; ni &lt; rows &amp;&amp; nj &gt;&#x3D; 0 &amp;&amp; nj &lt; cols &amp;&amp; grid[ni, nj] &#x3D;&#x3D; 0) {
                    &#x2F;&#x2F; Actualizăm distanța și îl adăugăm în coadă
                    grid[ni, nj] &#x3D; grid[i, j] + 1;
                    queue.Enqueue((ni, nj));

                    &#x2F;&#x2F; Dacă am ajuns la poziția finală, oprim căutarea
                    if (ni &#x3D;&#x3D; iStop &amp;&amp; nj &#x3D;&#x3D; jStop)
                        return;
                }
            }
        }
    }

    static void Main() {
        &#x2F;&#x2F; Labirintul: 0 &#x3D; liber, -1 &#x3D; obstacol
        int[,] grid &#x3D; {
            { 0, 0, 0, -1, -1, 0, 0, 0, -1, 0 },
            { -1, -1, 0, -1, 0, -1, 0, 0, 0, -1 },
            { -1, 0, 0, 0, 0, 0, 0, -1, -1, 0 },
            { -1, -1, -1, 0, -1, -1, -1, 0, -1, 0 },
            { -1, 0, 0, -1, -1, 0, -1, 0, 0, 0 },
            { -1, 0, 0, -1, -1, 0, 0, 0, 0, 0 }
        };

        int iStart &#x3D; 0, jStart &#x3D; 0; &#x2F;&#x2F; Start
        int iStop &#x3D; 1, jStop &#x3D; 8;   &#x2F;&#x2F; Destinație

        BFS(grid, 6, 10, iStart, jStart, iStop, jStop);
        Console.WriteLine(grid[iStop, jStop]); &#x2F;&#x2F; Afișăm distanța finală
    }
}