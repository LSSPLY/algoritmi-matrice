using System;

class Program
{
    &#x2F;&#x2F; Funcția DFS pentru a găsi cel mai scurt drum într-un labirint
    static void DFS(int[,] matrice, int iDim, int jDim, int iPoz, int jPoz, int iStop, int jStop)
    {
        &#x2F;&#x2F; Dacă am ajuns la destinație, oprim recursivitatea
        if (iPoz &#x3D;&#x3D; iStop &amp;&amp; jPoz &#x3D;&#x3D; jStop)
            return;

        &#x2F;&#x2F; Vectori de direcție: jos, dreapta, sus, stânga
        int[] di &#x3D; { 1, 0, -1, 0 };
        int[] dj &#x3D; { 0, 1, 0, -1 };

        &#x2F;&#x2F; Verificăm fiecare dintre cei 4 vecini
        for (int k &#x3D; 0; k &lt; 4; k++)
        {
            int iVecin &#x3D; iPoz + di[k];
            int jVecin &#x3D; jPoz + dj[k];

            &#x2F;&#x2F; Dacă vecinul este în interiorul grilei și este liber (0)
            if (iVecin &gt;&#x3D; 0 &amp;&amp; iVecin &lt; iDim &amp;&amp; jVecin &gt;&#x3D; 0 &amp;&amp; jVecin &lt; jDim &amp;&amp; matrice[iVecin, jVecin] &#x3D;&#x3D; 0)
            {
                matrice[iVecin, jVecin] &#x3D; matrice[iPoz, jPoz] + 1;  &#x2F;&#x2F; Incrementăm distanța
                &#x2F;&#x2F; Procesăm vecinul
                DFS(matrice, iDim, jDim, iVecin, jVecin, iStop, jStop);
            }
        }
    }

    static void Main()
    {
        &#x2F;&#x2F; Reprezentarea labirintului: 0 &#x3D; liber, -1 &#x3D; obstacol
        int[,] matrice &#x3D; new int[6, 10]
        {
            { 0,  0,  0, -1, -1,  0,  0,  0, -1,  0},
            {-1, -1,  0, -1,  0, -1,  0,  0,  0, -1},
            {-1,  0,  0,  0,  0,  0,  0, -1, -1,  0},
            {-1, -1, -1,  0, -1, -1, -1,  0, -1,  0},
            {-1,  0,  0, -1, -1,  0, -1,  0,  0,  0},
            {-1,  0,  0, -1, -1,  0,  0,  0,  0,  0}
        };

        int iStart &#x3D; 0, jStart &#x3D; 0; &#x2F;&#x2F; Coordonatele de start
        int iStop &#x3D; 1, jStop &#x3D; 8;   &#x2F;&#x2F; Coordonatele de destinație

        matrice[iStart, jStart] &#x3D; 1;  &#x2F;&#x2F; Marcăm poziția de start cu distanța 1
        DFS(matrice, 6, 10, iStart, jStart, iStop, jStop);

        &#x2F;&#x2F; Afișăm distanța până la destinație (sau valoare implicită dacă nu s-a ajuns)
        if (matrice[iStop, jStop] &gt; 0)
            Console.WriteLine(&quot;Distanța până la destinație: &quot; + (matrice[iStop, jStop]));
        else
            Console.WriteLine(&quot;Destinația nu poate fi atinsă.&quot;);
    }
}