#include &lt;iostream&gt;
using namespace std;

&#x2F;&#x2F; Funcția DFS pentru a găsi cel mai scurt drum într-un labirint
void dfs(int matrice[][10], int iDim, int jDim, int iPoz, int jPoz, int iStop, int jStop) {
    &#x2F;&#x2F; Dacă am ajuns la destinație, oprim recursivitatea
    if (iPoz &#x3D;&#x3D; iStop &amp;&amp; jPoz &#x3D;&#x3D; jStop)
        return;

    &#x2F;&#x2F; Vectori de direcție: jos, dreapta, sus, stânga
    int di[4] &#x3D; {1, 0, -1, 0};
    int dj[4] &#x3D; {0, 1, 0, -1};

    &#x2F;&#x2F; Explorăm cei 4 vecini ai celulei curente
    for (int k &#x3D; 0; k &lt; 4; k++) {
        int iVecin &#x3D; iPoz + di[k];
        int jVecin &#x3D; jPoz + dj[k];

        &#x2F;&#x2F; Verificăm dacă vecinul este în interiorul matricei și este o celulă liberă (valoare 0)
        if (iVecin &gt;&#x3D; 0 &amp;&amp; iVecin &lt; iDim &amp;&amp; jVecin &gt;&#x3D; 0 &amp;&amp; jVecin &lt; jDim &amp;&amp; matrice[iVecin][jVecin] &#x3D;&#x3D; 0) {
            &#x2F;&#x2F; Notăm distanța față de punctul de start (incrementăm cu 1 față de poziția curentă)
            matrice[iVecin][jVecin] &#x3D; matrice[iPoz][jPoz] + 1;

            &#x2F;&#x2F; Continuăm recursiv de la vecinul curent
            dfs(matrice, iDim, jDim, iVecin, jVecin, iStop, jStop);
        }
    }
}

int main() {
    &#x2F;&#x2F; Reprezentarea labirintului: 0 &#x3D; liber, -1 &#x3D; obstacol
    int matrice[6][10] &#x3D; {
        { 0,  0,  0, -1, -1,  0,  0,  0, -1,  0},
        {-1, -1,  0, -1,  0, -1,  0,  0,  0, -1},
        {-1,  0,  0,  0,  0,  0,  0, -1, -1,  0},
        {-1, -1, -1,  0, -1, -1, -1,  0, -1,  0},
        {-1,  0,  0, -1, -1,  0, -1,  0,  0,  0},
        {-1,  0,  0, -1, -1,  0,  0,  0,  0,  0}
    };

    int iStart &#x3D; 0, jStart &#x3D; 0; &#x2F;&#x2F; Coordonatele de start
    int iStop &#x3D; 1, jStop &#x3D; 8;   &#x2F;&#x2F; Coordonatele destinației

    &#x2F;&#x2F; Marcăm poziția de start cu valoarea 1 (distanța inițială)
    matrice[iStart][jStart] &#x3D; 1;

    &#x2F;&#x2F; Pornim căutarea în adâncime de la punctul de start
    dfs(matrice, 6, 10, iStart, jStart, iStop, jStop);

    &#x2F;&#x2F; Afișăm distanța până la destinație (minus 1 deoarece startul a fost marcat cu 1)
    if (matrice[iStop][jStop] &gt; 0)
        cout &lt;&lt; &quot;Distanța până la destinație: &quot; &lt;&lt; matrice[iStop][jStop] &lt;&lt; endl;
    else
        cout &lt;&lt; &quot;Destinația nu poate fi atinsă din punctul de start.&quot; &lt;&lt; endl;

    return 0;
}