#include &lt;iostream&gt;
#include &lt;queue&gt;
using namespace std;

&#x2F;&#x2F; Funcția BFS pentru a găsi cel mai scurt drum într-un labirint
void bfs(int matrice[][10], int iDim, int jDim, int iStart, int jStart, int iStop, int jStop) {
    &#x2F;&#x2F; Vectori de direcție: jos, dreapta, sus, stânga
    int di[4] &#x3D; {1, 0, -1, 0};
    int dj[4] &#x3D; {0, 1, 0, -1};

    queue&lt;pair&lt;int, int&gt;&gt; coada; &#x2F;&#x2F; Coada BFS pentru parcurgerea pozițiilor

    matrice[iStart][jStart] &#x3D; 1;  &#x2F;&#x2F; Marcăm poziția de start cu distanța 1
    coada.push(make_pair(iStart, jStart));

    while (!coada.empty()) {
        int iPoz &#x3D; coada.front().first;
        int jPoz &#x3D; coada.front().second;
        coada.pop();

        &#x2F;&#x2F; Verificăm fiecare dintre cei 4 vecini
        for (int k &#x3D; 0; k &lt; 4; k++) {
            int iVecin &#x3D; iPoz + di[k];
            int jVecin &#x3D; jPoz + dj[k];

            &#x2F;&#x2F; Dacă vecinul este în interiorul grilei și este liber (0)
            if (iVecin &gt;&#x3D; 0 &amp;&amp; iVecin &lt; iDim &amp;&amp; jVecin &gt;&#x3D; 0 &amp;&amp; jVecin &lt; jDim &amp;&amp; matrice[iVecin][jVecin] &#x3D;&#x3D; 0) {
                matrice[iVecin][jVecin] &#x3D; matrice[iPoz][jPoz] + 1;  &#x2F;&#x2F; Incrementăm distanța

                &#x2F;&#x2F; Adăugăm vecinul în coadă pentru procesare ulterioară
                coada.push(make_pair(iVecin, jVecin));

                &#x2F;&#x2F; Dacă am ajuns la destinație, putem opri căutarea
                if (iVecin &#x3D;&#x3D; iStop &amp;&amp; jVecin &#x3D;&#x3D; jStop)
                    return;
            }
        }
    }
}

int main() {
    &#x2F;&#x2F; Reprezentarea labirintului: 0 &#x3D; liber, -1 &#x3D; obstacol
    int matrice[6][10] &#x3D; {
        { 0,  0,  0, -1, -1,  0,  0,  0, -1,  0},
        {-1, -1,  0, -1,  0, -1,  0,  0,  0, -1},
        {-1,  0,  0,  0,  0,  0,  0, -1, -1,  0},
        {-1, -1, -1,  0, -1, -1, -1,  0, -1,  0},
        {-1,  0,  0, -1, -1,  0, -1,  0,  0,  0},
        {-1,  0,  0, -1, -1,  0,  0,  0,  0,  0}
    };

    int iStart &#x3D; 0, jStart &#x3D; 0; &#x2F;&#x2F; Coordonatele de start
    int iStop &#x3D; 1, jStop &#x3D; 8;   &#x2F;&#x2F; Coordonatele de destinație

    bfs(matrice, 6, 10, iStart, jStart, iStop, jStop);

    &#x2F;&#x2F; Afișăm distanța până la destinație (sau valoare implicită dacă nu s-a ajuns)
    cout &lt;&lt; matrice[iStop][jStop];

    return 0;
}