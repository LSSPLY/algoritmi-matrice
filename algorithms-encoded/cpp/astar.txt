#include &lt;iostream&gt;
#include &lt;cmath&gt;
#include &lt;tuple&gt;
#include &lt;queue&gt;
using namespace std;

&#x2F;&#x2F; Calculează distanța Manhattan dintre două poziții din grilă
double distantaManhattan(int iPoz, int jPoz, int iStop, int jStop) {
    return abs(iPoz - iStop) + abs(jPoz - jStop);
}

&#x2F;&#x2F; Algoritmul A* pentru a găsi un drum de la punctul de start la punctul de stop într-un labirint
void astar(int matrice[][10], int iDim, int jDim, int iStart, int jStart, int iStop, int jStop) {
    &#x2F;&#x2F; Vectori care definesc mișcarea în cele 4 direcții: jos, dreapta, sus, stânga
    int di[4] &#x3D; {1, 0, -1, 0};
    int dj[4] &#x3D; {0, 1, 0, -1};

    priority_queue&lt;tuple&lt;int, int, int&gt;&gt; openSet; &#x2F;&#x2F; Coada de priorități pentru noduri, ordonată după scorul f (inversat pentru a obține efect de min-heap)
    int gScore[iDim][jDim];  &#x2F;&#x2F; Costul real de la start până la fiecare nod
    int fScore[iDim][jDim];  &#x2F;&#x2F; Estimarea costului total de la start până la stop prin acel nod

    matrice[iStart][jStart] &#x3D; 1;  &#x2F;&#x2F; Marcare inițială a poziției de start (nu reprezintă scorul real)
    gScore[iStart][jStart] &#x3D; 0;  &#x2F;&#x2F; Costul de la start până aici este 0
    fScore[iStart][jStart] &#x3D; distantaManhattan(iStart, jStart, iStop, jStop); &#x2F;&#x2F; Estimarea distanței până la destinație
    openSet.push(make_tuple(-fScore[iStart][jStart], iStart, jStart)); &#x2F;&#x2F; Se adaugă în coadă cu scorul negativ pentru min-heap

    while (!openSet.empty()) {
        int fScoreCurent, iPoz, jPoz;
        tie(fScoreCurent, iPoz, jPoz) &#x3D; openSet.top();
        openSet.pop();
        fScoreCurent &#x3D; -fScoreCurent; &#x2F;&#x2F; Se obține valoarea pozitivă a scorului f extras din coadă

        &#x2F;&#x2F; Se verifică toți cei 4 vecini ai nodului curent
        for (int k &#x3D; 0; k &lt; 4; k++) {
            int iVecin &#x3D; iPoz + di[k];
            int jVecin &#x3D; jPoz + dj[k];

            &#x2F;&#x2F; Verifică dacă vecinul este în interiorul grilei și este un spațiu liber (0)
            if (iVecin &gt;&#x3D; 0 &amp;&amp; iVecin &lt; iDim &amp;&amp; jVecin &gt;&#x3D; 0 &amp;&amp; jVecin &lt; jDim &amp;&amp; matrice[iVecin][jVecin] &#x3D;&#x3D; 0) {
                matrice[iVecin][jVecin] &#x3D; matrice[iPoz][jPoz] + 1;  &#x2F;&#x2F; Se actualizează matricea cu un &quot;pas&quot; în plus

                &#x2F;&#x2F; Adaugă vecinul în coada de priorități pentru a fi procesat
                openSet.push(make_tuple(distantaManhattan(iVecin, jVecin, iStop, jStop), iVecin, jVecin));

                &#x2F;&#x2F; Dacă s-a ajuns la destinație, se încheie căutarea
                if (iVecin &#x3D;&#x3D; iStop &amp;&amp; jVecin &#x3D;&#x3D; jStop)
                    return;
            }
        }
    }
}

int main() {
    &#x2F;&#x2F; Reprezentarea labirintului: 0 &#x3D; spațiu liber, -1 &#x3D; obstacol
    int matrice[6][10] &#x3D; {
        { 0,  0,  0, -1, -1,  0,  0,  0, -1,  0},
        {-1, -1,  0, -1,  0, -1,  0,  0,  0, -1},
        {-1,  0,  0,  0,  0,  0,  0, -1, -1,  0},
        {-1, -1, -1,  0, -1, -1, -1,  0, -1,  0},
        {-1,  0,  0, -1, -1,  0, -1,  0,  0,  0},
        {-1,  0,  0, -1, -1,  0,  0,  0,  0,  0}
    };

    int iStart &#x3D; 0, jStart &#x3D; 0; &#x2F;&#x2F; Coordonatele de pornire
    int iStop &#x3D; 1, jStop &#x3D; 8;   &#x2F;&#x2F; Coordonatele destinației

    astar(matrice, 6, 10, iStart, jStart, iStop, jStop);

    &#x2F;&#x2F; Afișează valoarea finală din poziția destinație (distanța parcursă dacă s-a ajuns acolo)
    cout &lt;&lt; matrice[iStop][jStop];

    return 0;
}