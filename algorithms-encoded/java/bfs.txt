import java.util.*;

public class bfs {
    &#x2F;&#x2F; BFS pentru găsirea drumului minim într-un labirint
    public static void bfs(int[][] grid, int rows, int cols, int iStart, int jStart, int iStop, int jStop) {
        int[] di &#x3D; {1, 0, -1, 0}; &#x2F;&#x2F; jos, dreapta, sus, stânga
        int[] dj &#x3D; {0, 1, 0, -1};

        Queue&lt;int[]&gt; queue &#x3D; new LinkedList&lt;&gt;();
        grid[iStart][jStart] &#x3D; 1; &#x2F;&#x2F; Setăm poziția de start cu valoare 1
        queue.add(new int[]{iStart, jStart});

        while (!queue.isEmpty()) {
            int[] pos &#x3D; queue.poll();
            int i &#x3D; pos[0], j &#x3D; pos[1];

            &#x2F;&#x2F; Verificăm toți vecinii
            for (int k &#x3D; 0; k &lt; 4; k++) {
                int ni &#x3D; i + di[k];
                int nj &#x3D; j + dj[k];

                &#x2F;&#x2F; Verificăm dacă vecinul este valid și liber
                if (ni &gt;&#x3D; 0 &amp;&amp; ni &lt; rows &amp;&amp; nj &gt;&#x3D; 0 &amp;&amp; nj &lt; cols &amp;&amp; grid[ni][nj] &#x3D;&#x3D; 0) {
                    grid[ni][nj] &#x3D; grid[i][j] + 1; &#x2F;&#x2F; Incrementez distanța
                    queue.add(new int[]{ni, nj}); &#x2F;&#x2F; Adaug vecinul în coadă

                    &#x2F;&#x2F; Dacă am ajuns la destinație, oprim parcurgerea
                    if (ni &#x3D;&#x3D; iStop &amp;&amp; nj &#x3D;&#x3D; jStop)
                        return;
                }
            }
        }
    }

    public static void main(String[] args) {
        &#x2F;&#x2F; Labirintul: 0 &#x3D; liber, -1 &#x3D; obstacol
        int[][] grid &#x3D; {
            { 0, 0, 0, -1, -1, 0, 0, 0, -1, 0 },
            { -1, -1, 0, -1, 0, -1, 0, 0, 0, -1 },
            { -1, 0, 0, 0, 0, 0, 0, -1, -1, 0 },
            { -1, -1, -1, 0, -1, -1, -1, 0, -1, 0 },
            { -1, 0, 0, -1, -1, 0, -1, 0, 0, 0 },
            { -1, 0, 0, -1, -1, 0, 0, 0, 0, 0 }
        };

        int iStart &#x3D; 0, jStart &#x3D; 0; &#x2F;&#x2F; Coordonatele de pornire
        int iStop &#x3D; 1, jStop &#x3D; 8;   &#x2F;&#x2F; Destinația

        bfs(grid, 6, 10, iStart, jStart, iStop, jStop);

        &#x2F;&#x2F; Afișează distanța de la start la stop
        System.out.println(grid[iStop][jStop]);
    }
}