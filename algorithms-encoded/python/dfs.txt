# Funcția DFS pentru a găsi cel mai scurt drum într-un labirint
def dfs(matrice, iDim, jDim, iPoz, jPoz, iStop, jStop):
    # Dacă am ajuns la destinație, putem opri căutarea
    if iPoz &#x3D;&#x3D; iStop and jPoz &#x3D;&#x3D; jStop:
        return

    # Vectori de direcție: jos, dreapta, sus, stânga
    di &#x3D; [1, 0, -1, 0]
    dj &#x3D; [0, 1, 0, -1]

    # Verificăm fiecare dintre cei 4 vecini
    for k in range(4):
        iVecin &#x3D; iPoz + di[k]
        jVecin &#x3D; jPoz + dj[k]

        # Dacă vecinul este în interiorul grilei și este liber (0)
        if 0 &lt;&#x3D; iVecin &lt; iDim and 0 &lt;&#x3D; jVecin &lt; jDim and matrice[iVecin][jVecin] &#x3D;&#x3D; 0:
            matrice[iVecin][jVecin] &#x3D; matrice[iPoz][jPoz] + 1  # Incrementăm distanța
            # Procesăm vecinul
            dfs(matrice, iDim, jDim, iVecin, jVecin, iStop, jStop)


# Reprezentarea labirintului: 0 &#x3D; liber, -1 &#x3D; obstacol
matrice &#x3D; [
[ 0,  0,  0, -1, -1,  0,  0,  0, -1,  0],
    [-1, -1,  0, -1,  0, -1,  0,  0,  0, -1],
    [-1,  0,  0,  0,  0,  0,  0, -1, -1,  0],
    [-1, -1, -1,  0, -1, -1, -1,  0, -1,  0],
    [-1,  0,  0, -1, -1,  0, -1,  0,  0,  0],
    [-1,  0,  0, -1, -1,  0,  0,  0,  0,  0]
]

iStart, jStart &#x3D; 0, 0  # Coordonatele de start
iStop, jStop &#x3D; 1, 8    # Coordonatele de destinație

matrice[iStart][jStart] &#x3D; 1  # Marcăm poziția de start cu distanța 1
dfs(matrice, 6, 10, iStart, jStart, iStop, jStop)

# Afișăm distanța până la destinație (sau mesaj dacă nu s-a ajuns)
if matrice[iStop][jStop] &gt; 0:
    print(&quot;Distanța până la destinație:&quot;, matrice[iStop][jStop])
else:
    print(&quot;Destinația nu poate fi atinsă.&quot;)